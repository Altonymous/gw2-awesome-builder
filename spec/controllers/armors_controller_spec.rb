require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ArmorsController do
  # This should return the minimal set of attributes required to create a valid
  # Armor. As you add validations to Armor, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    gear_enhancements = []
    gear_enhancements << attributes_for(:gear_enhancement).merge({enhancement_id: Enhancement.first.id})
    gear_enhancements << attributes_for(:gear_enhancement).merge({enhancement_id: Enhancement.last.id})
    {
      name: 'Awesome Armor',
      level: 1,
      weight_id: Weight.first.id,
      slot_id: Slot.find_by_name('Head').id,
      gear_enhancements: gear_enhancements
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ArmorsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all armors as @armors" do
      armor = create(:armor, :with_enhancement)
      get :index, {}, valid_session
      assigns(:armors).should eq([armor])
    end
  end

  describe "GET show" do
    it "assigns the requested armor as @armor" do
      armor = create(:armor, :with_enhancement)
      get :show, {id: armor.to_param}, valid_session
      assigns(:armor).should eq(armor)
    end
  end

  describe "GET new" do
    it "assigns a new armor as @armor" do
      get :new, {}, valid_session
      assigns(:armor).should be_a_new(Armor)
    end
  end

  describe "GET edit" do
    it "assigns the requested armor as @armor" do
      armor = create(:armor, :with_enhancement)
      get :edit, {id: armor.to_param}, valid_session
      assigns(:armor).should eq(armor)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Armor" do
        expect {
          post :create, {armor: (valid_attributes)}, valid_session
        }.to change(Armor, :count).by(1)
      end

      it "assigns a newly created armor as @armor" do
        post :create, {armor: (valid_attributes)}, valid_session
        assigns(:armor).should be_a(Armor)
        assigns(:armor).should be_persisted
      end

      it "redirects to the created armor" do
        post :create, {armor: (valid_attributes)}, valid_session
        response.should redirect_to(Armor.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved armor as @armor" do
        # Trigger the behavior that occurs when invalid params are submitted
        Armor.any_instance.stub(:save).and_return(false)
        post :create, {armor: {}}, valid_session
        assigns(:armor).should be_a_new(Armor)
      end

      it "redirects to the 'armors#index' action" do
        # Trigger the behavior that occurs when invalid params are submitted
        Armor.any_instance.stub(:save).and_return(false)
        post :create, {armor: {}}, valid_session
        response.should redirect_to(controller: :armors, action: :index)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested armor" do
        armor = create(:armor, :with_enhancement)
        # Assuming there are no other armors in the database, this
        # specifies that the Armor created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Armor.any_instance.should_receive(:update_attributes).with({"level" => "2", "interval" => "1"})
        put :update, {id: armor.to_param, armor: {"level" => "2", "interval" => "1"}}, valid_session
      end

      it "assigns the requested armor as @armor" do
        armor = create(:armor, :with_enhancement)
        put :update, {id: armor.to_param, armor: (valid_attributes)}, valid_session
        assigns(:armor).should eq(armor)
      end

      it "redirects to the armor" do
        armor = create(:armor, :with_enhancement)
        put :update, {id: armor.to_param, armor: (valid_attributes)}, valid_session
        response.should redirect_to(armor)
      end
    end

    describe "with invalid params" do
      it "assigns the armor as @armor" do
        armor = create(:armor, :with_enhancement)
        # Trigger the behavior that occurs when invalid params are submitted
        Armor.any_instance.stub(:save).and_return(false)
        put :update, {id: armor.to_param, armor: {}}, valid_session
        assigns(:armor).should eq(armor)
      end

      it "redirects to the 'armors#show' action" do
        armor = create(:armor, :with_enhancement)
        # Trigger the behavior that occurs when invalid params are submitted
        Armor.any_instance.stub(:save).and_return(false)
        put :update, {id: armor.to_param, armor: {}}, valid_session
        response.should redirect_to(controller: :armors, action: :show)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested armor" do
      armor = create(:armor, :with_enhancement)
      expect {
        delete :destroy, {id: armor.to_param}, valid_session
      }.to change(Armor, :count).by(-1)
    end

    it "redirects to the armors list" do
      armor = create(:armor, :with_enhancement)
      delete :destroy, {id: armor.to_param}, valid_session
      response.should redirect_to(armors_url)
    end
  end

end
